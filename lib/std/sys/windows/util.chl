let { MultiByteToWideChar } = import kernel32
let * = import types
let { panic, c: { printf, malloc, free } } = import std

pub fn utf8_to_utf16(s: *str) -> *[]u16 = {
	if s.len == 0 {
		panic("empty string")
	}

	let mut n = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, s.data, s.len as _, 0 as uint as _, 0)
    
	if n == 0 {
		panic()
	}
    
    # TODO: the caller should free `text`
	let mut text = malloc((n + 1) as uint) as *mut u16

	let n1 = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, s.data, s.len as _, text, n)
    
	if n1 == 0 {
		# free(text)
		panic()
	}

    text[n] = 0

    printf("n = %d\n".data, n)

	while n >= 1 && text[n - 1] == 0 {
		n -= 1
	}

    printf("n = %d\n".data, n)

	&text[:n]
}