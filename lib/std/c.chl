// TODO (ICE): this stack overflows
let { os, Os_windows } = import intrinsics

// Types
pub type char = u8

pub type schar = i8
pub type short = i16
pub type int = i32
pub type long = i64
// TODO (ICE): this stack overflows
// pub type long = if os == Os_windows || size_of!(uint) == 4 { i32 } else { i64 }
pub type longlong = i64

pub type uchar = u8
pub type ushort = u16
pub type uint = u32
pub type ulong = u64
// TODO (ICE): this stack overflows
// pub type ulong = if os == Os_windows || size_of!(uint) == 4 { u32 } else { u64 }
pub type ulonglong = u64

pub type bool = bool

pub type size_t = uint
pub type ssize_t = int
// TODO (ICE): this stack overflows
// pub type wchar_t = if os == Os_windows { u16 } else { u32 }

pub type float = f32
pub type double = f64

pub type int8_t = i8
pub type uint8_t = u8

pub type int16_t = i16
pub type uint16_t = u16

pub type int32_t = i32
pub type uint32_t = u32

pub type int64_t = i64
pub type uint64_t = u64

pub type intptr_t = int
pub type uintptr_t = uint

pub type intmax_t = i64
pub type uintmax_t = u64

pub type pid_t = int

pub type void = ()

// Constants
pub let INT8_MAX: int8_t = 0x7f
pub let INT16_MAX: int16_t = 0x7fff
pub let INT32_MAX: int32_t = 0x7fffffff
pub let INT64_MAX: longlong = 0x7fffffffffffffff

pub let UINT8_MAX: uint8_t = 0xff
pub let UINT16_MAX: uint16_t = 0xffff
pub let UINT32_MAX: uint32_t = 0xffffffff
pub let UINT64_MAX: ulonglong = 0xffffffffffffffff

pub let INT8_MIN: int8_t = !INT8_MAX
pub let INT16_MIN: int16_t = !INT16_MAX
pub let INT32_MIN: int32_t = !INT32_MAX
pub let INT64_MIN: longlong = !INT64_MAX

pub let CHAR_BIT = 8

// Functions
let c = "c"

![lib = c]
pub extern fn putchar(char: int) -> int

![lib = c]
pub extern fn getchar() -> int

![lib = c]
pub extern fn printf(input: *char, args...) -> int

![lib = c]
pub extern fn strcpy(dest: *mut char, src: *char) -> *char

![lib = c]
pub extern fn malloc(size: size_t) -> *mut void

![lib = c]
pub extern fn calloc(nitems: size_t, size: size_t) -> *mut void

![lib = c]
pub extern fn realloc(ptr: *void, size: size_t) -> *mut void

![lib = c]
pub extern fn free(memblock: *void)

![lib = c]
pub extern fn abs(x: int) -> int

![lib = c]
pub extern fn sinf(arg: float) -> float

![lib = c]
pub extern fn sin(arg: double) -> double

![lib = c]
pub extern fn cosf(arg: float) -> float

![lib = c]
pub extern fn cos(arg: double) -> double

![lib = c]
pub extern fn atan2f(y: float, x: float) -> float

![lib = c]
pub extern fn atan2(y: double, x: double) -> double

![lib = c]
pub extern fn pow(x: double, y: double) -> double

![lib = c]
pub extern fn srand(seed: uint)

![lib = c]
pub extern fn rand() -> int

![lib = c]
pub extern fn fork() -> pid_t

![lib = c]
pub extern fn waitpid(pid: pid_t, status: *mut int, options: int) -> pid_t

![lib = c]
pub extern fn execl(path: *char, args...) -> int

![lib = c]
pub extern fn abort() -> never

![lib = c]
pub extern fn exit(status: int) -> never
