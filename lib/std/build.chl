let { panic } = import lib
pub let { os, Os_linux, Os_windows } = import intrinsics
let { printf, waitpid, fork, execl } = import c

@intrinsic
pub extern fn start_workspace(workspace: Workspace) -> (*str, bool)

pub type Workspace = struct {
    name: *str
    build_options: BuildOptions
}

pub type BuildOptions = struct {
    input_file: *str
    output_file: *str
    target: BuildTarget
    optimization_level: OptimizationLevel
}

# TODO: turn into enum
pub type BuildTarget = uint
pub let BuildTarget_auto: BuildTarget = 0
pub let BuildTarget_linux: BuildTarget = 1
pub let BuildTarget_windows: BuildTarget = 2

# TODO: turn into enum
pub type OptimizationLevel = uint
pub let OptimizationLevel_debug: OptimizationLevel = 0
pub let OptimizationLevel_release: OptimizationLevel = 1

pub fn run_output_file(output_file: *str) = {
    if os == Os_linux {
        let pid = fork()

        if pid == 0 {
            # child process
            execl(output_file.data, 0)
        } else if pid > 0 {
            # parent process
            waitpid(pid, (0 as int) as _, 0)
        } else {
            # error
            panic("fork failed")
        }
    } else if os == Os_windows {
        panic("windows")
    } else {
        # TODO: when panic formatting is implemented, use it here
        printf("os = %d\n".data, os)
        panic("unsupported OS")
    }

    ()
}