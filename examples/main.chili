use c.{ puts, printf }

foreign("./test_dll/test.lib") {
    let print_number = fn(cb: fn(n: i32) -> i32)
    let call_puts = fn(cb: fn(s: [*]u8) -> int)
}

type Person = { name: str, age: i64 }
type PersonTuple = (str, i64)

let main = fn() {
    let mut array: [3]i64 = [1, 2, 3]
    let slice: []mut i64 = array[1..]
    let slice2: []i64 = slice[1..]
    // let slice: []i64 = &array

    array[0] = 5
    slice[0] = 10
    slice2[0] = 15

    printf("array[0] = %d\tlen = %d\n".data, array[0], array.len)
    printf("slice[0] = %d\tlen = %d\n".data, slice[0], slice.len)
    printf("slice2[0] = %d\tlen = %d\n".data, slice2[0], slice2.len)

    // for slice {
    //     foo(.{ name: "Ron\0", age: it })
    // }

    // printf("Hello\n".data)
    // print_number(fn { it * 2 })
    // call_puts(puts)
    // bar(("Rewon\0", 46))
    // printf("Goodbye\n".data)
}

let foo = fn({ name, age }: Person) {
    printf("name = %s, age = %d\n".data, name.data, age)
}

let bar = fn((name, age): PersonTuple) {
    printf("name = %s, age = %d\n".data, name.data, age)
}

@run(main())