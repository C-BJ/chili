let * = import std/build

fn build = {
	let build_options = BuildOptions {
        input_file: "src/main.chl",
        output_file: "out/main",
        target: BuildTarget_auto,
        optimization_level: OptimizationLevel_debug,
	}

	let workspace = Workspace {
		name: "hello",
		build_options
	}

	let (output_file, ok) = start_workspace(workspace)

	if ok {
		let w = std.sys.windows

		std.c.printf("%s\n".data, output_file.data)
		std.c.printf("size = %d\n".data, size_of!(w.types.STARTUPINFO))

		let si = w.types.STARTUPINFO {
			cb: size_of!(w.types.STARTUPINFO) as _,
			lpReserved: 0 as uint as _,
			lpDesktop: 0 as uint as _,
			lpTitle: 0 as uint as _,
			dwX: 0,
			dwY: 0,
			dwXSize: 0,
			dwYSize: 0,
			dwXCountChars: 0,
			dwYCountChars: 0,
			dwFillAttribute: 0,
			dwFlags: 0,
			wShowWindow: 0,
			cbReserved2: 0,
			lpReserved2: 0 as uint as _,
			hStdInput: 0,
			hStdOutput: 0,
			hStdError: 0,
		}

		let mut pi = w.types.PROCESS_INFORMATION {
			hProcess: 0,
			hThread: 0,
			dwProcessId: 0,
			dwThreadId: 0,
		}

		println("AAA")
		let result = w.kernel32.CreateProcessW(
			output_file.data,
			0 as uint as _,
			0 as uint as _,
			0 as uint as _,
			0,
			0,
			0 as uint as _,
			0 as uint as _,
			&si,
			&mut pi,
		)
		println("BBB")

		if result != 0 {
			std.c.printf("hProcess = %d\n".data, pi.hProcess)
			w.kernel32.WaitForSingleObject(pi.hProcess, w.types.INFINITE)
			w.kernel32.CloseHandle(pi.hProcess)
			()
		} else {
			std.c.printf("error = %d\n".data, w.kernel32.GetLastError())
			()
		}

		# run_output_file(output_file)
	}
}

static { build() }
