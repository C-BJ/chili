use raylib.*;
use c.*;
use noise.*;

let width uint = 400;
let height uint = 300;
let mut buf1 [&mut]u8 = calloc(width * height, @size_of(u8));
let mut buf2 [&mut]u8 = calloc(width * height, @size_of(u8));
let mut cooling [&mut]u8 = calloc(width * height, @size_of(u8));

let main = fn() {
    defer free(buf1 as _);
    defer free(buf2 as _);

	InitWindow(width, height, "chili language - test - fire simulation\0".data);
	SetTargetFPS(60);
	while !WindowShouldClose() {
		draw();
	}
	CloseWindow();
}

let draw = fn() {
	BeginDrawing();

	fire(2);
	cool();

	ClearBackground(black);

	for x in 1..width - 2 {
		for y in 1..height - 2 {
			let i0 = x + y * width;
			let i1 = x+1 + y * width;
			let i2 = x-1 + y * width;
			let i3 = x + (y+1) * width;
			let i4 = x + (y-1) * width;

			let c1 = buf1[i1];
			let c2 = buf1[i2];
			let c3 = buf1[i3];
			let c4 = buf1[i4];

			let c5 = cooling[i0];
			let new_c = c1 + c2 + c3 + c4;
			let new_c = (new_c as f64 * 0.25) - c5 as f64;

			buf2[i4] = new_c as _;
		}
	}

	let temp = buf1;
	buf1 = buf2;
	buf2 = temp;

	draw_buf(buf2);
	draw_buf(cooling);

	DrawFPS(10, 10);

	EndDrawing();
}

let fire = fn(rows uint) {
	for x in 0..width - 1 {
		for y in 0..rows - 1 {
			let y = height - (y + 1);
			buf1[x + y * width] = 255;
		}
	}
}

let mut ystart f64 = 0.0;

let cool = fn() {
	let mut xoff = 0.0;
	let increment = 0.02;

	for x in 0..width - 1 {
		xoff += increment;
		let mut yoff = ystart;
		for y in 0..height - 1 {
			yoff += increment;
			let n = perlin2d(xoff, yoff, 0.1, 4);
			let bright = pow(n, 3) * 255;
			cooling[x + y * width] = bright as _;
		}
	}
}

let draw_buf = fn(buf [&]u8) {
	for 0..width * height - 1 {
		let x = it % width;
		let y = it / width;
		let c = color_uniform(buf[it]);
		DrawPixel(x, y, c);
	}
}

let color_uniform = fn(v u8) -> Color {
	.{
		r = v,
		g = v,
		b = v,
		a = v,
	}
}