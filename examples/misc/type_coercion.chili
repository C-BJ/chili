let foreign("c") printf = fn(input [u8; *], ..) -> u64;

let main = fn() {
	let array = [_]int{1, 2, 3};
	let slice []int = &array;

	for array {
		printf("array it=%d\n".data, it);
	}

	printf("\n".data);
	
	for slice {
		printf("slice it=%d\n".data, it);
	}

	let small i32 = 1;
	let big i64 = 2;

	# big = small;
	# let big u64 = small;

	let sum i64 = big + small;
	let is_gt = big > small;
	let is_eq = big == small;

	let cond = if true {
		let a i32 = 10;
		a
	} else {
		let b i64 = 10;
		b
	};

	foo(small, small);

	test_return(); # SHOULD ONLY COERCE ACTUAL

	let Thing = struct {
		a i64
	};
	let thing = Thing { a = small };

	let array = [_]i64{ small, big, 5 };

	let slice = array[1..2];
	
	printf("Hello Type Coercion.\n".data);
}

let foo = fn(a i32, b i64) {}

pub let test_return = fn() -> i32 {
	let x i8 = 1;
	return x;
}