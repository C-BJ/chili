use c.*
use kernel32.*

let OP_END u8 = 0
let OP_INC_DP u8 = 1
let OP_DEC_DP u8 = 2
let OP_INC_VAL u8 = 3
let OP_DEC_VAL u8 = 4
let OP_OUT u8 = 5
let OP_IN u8 = 6
let OP_JMP_FWD u8 = 7
let OP_JMP_BCK u8 = 8

let DATA_SIZE uint = 65535

type Instruction = {
    operator u8,
    operand int,
}

let PROGRAM_SIZE uint = 4096
type Program = [PROGRAM_SIZE]Instruction
let empty_program Program = [Instruction{..} PROGRAM_SIZE]

fn compile(buf str) -> Program = {
    let STACK_SIZE uint = 512
    type Stack = [STACK_SIZE]int

    let mut program Program
    let mut ip = 0

    let mut stack Stack
    let mut sp uint = 0
    
    while buf[ip] != '\0' && ip < PROGRAM_SIZE {
        let c = buf[ip]

        if c == '>' {
            program[ip].operator = OP_INC_DP
        } else if c == '<' {
            program[ip].operator = OP_DEC_DP
        } else if c == '+' {
            program[ip].operator = OP_INC_VAL
        } else if c == '-' {
            program[ip].operator = OP_DEC_VAL
        } else if c == '.' {
            program[ip].operator = OP_OUT
        } else if c == ',' {
            program[ip].operator = OP_IN
        } else if c == '[' {
            program[ip].operator = OP_JMP_FWD
            
            if sp == STACK_SIZE {
                return empty_program
            }

            stack[sp] = ip
            sp += 1
        } else if c == ']' {
            if sp == 0 {
                return empty_program
            }
            sp -= 1
            let jmp_ip = stack[sp]
            program[ip].operator = OP_JMP_BCK
            program[ip].operand = jmp_ip
            program[jmp_ip].operand = ip
        } else {
            ip -= 1
        }
        ip += 1
    }

    if sp != 0 || ip == PROGRAM_SIZE {
        empty_program
    } else {
        program[ip].operator = OP_END
        program
    }
}

fn execute(program Program) = {
    let mut data [DATA_SIZE]int
    let mut ip = 0
    let mut dp = 0

    while program[ip].operator != OP_END && dp < DATA_SIZE {
        let inst = program[ip] 

        if inst.operator == OP_INC_DP {
            dp += 1
        } else if inst.operator == OP_DEC_DP {
            dp -= 1
        } else if inst.operator == OP_INC_VAL {
            data[dp] += 1
        } else if inst.operator == OP_DEC_VAL {
            data[dp] -= 1
        } else if inst.operator == OP_OUT {
            putchar(data[dp])
        } else if inst.operator == OP_IN {
            data[dp] = getchar()
        } else if inst.operator == OP_JMP_FWD {
            if data[dp] == 0 {
                ip = program[ip].operand
            }
        } else if inst.operator == OP_JMP_BCK {
            if data[dp] != 0 {
                ip = program[ip].operand
            }
        } else {
            return
        }

        ip += 1
    }
}

fn main() = {
    let program = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++."
    let program = compile(program)
    if program.len > 0 {
        execute(program)
    } else {
        printf("Error\n".data)
    }
}